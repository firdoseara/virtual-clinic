<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home Page</title>
    <link rel="stylesheet" href="home.css">
    <style>
        /* Additional CSS styles for the square button */
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border: none;
            background-color: #007bff; /* Button color */
            color: white; /* Text color */
            cursor: pointer;
            padding: 10px; /* Space around the icon */
            margin-left: 5px; /* Space between buttons */
            border-radius: 5px; /* Optional: keep a slight rounding */
            font-size: 20px; /* Adjust font size */
        }

        #voice-output, #voice-input, #enter-button {
            width: 50px; /* Set a fixed width */
            height: 50px; /* Set a fixed height */
            border-radius: 5px; /* Optional: keep a slight rounding */
        }

        .output-container {
            margin-top: 20px; /* Space above output */
            max-height: 400px; /* Set a maximum height */
            overflow-y: auto; /* Enable vertical scrolling */
            border: 1px solid #ccc; /* Optional: border for better visibility */
            padding: 10px; /* Padding inside the output area */
            border-radius: 5px; /* Slight rounding for corners */
        }

        .conversation {
            margin-bottom: 10px; /* Space between conversations */
            padding: 5px; /* Space inside each conversation */
            border-radius: 5px; /* Slight rounding for corners */
            transition: background-color 0.3s; /* Smooth transition for background color */
        }

        .user {
            background-color: #e0f7fa; /* Light blue for user messages */
        }

        .doctor {
            background-color: #ffe0b2; /* Light orange for doctor messages */
        }

        .current-conversation {
            background-color: #81d4fa; /* Highlight color for current conversation */
        }

        .muted {
            background-color: #ffccbc; /* Light red for muted state */
        }
    </style>
</head>
<body>
    <header>
        <div class="logo-container">
            <img src="C:\Users\heena\virtual-clinic\Assets\logofinal.webp" alt="Logo" class="logo-image">
            <span class="logo-name">V-Cure</span>
        </div>
        <nav class="nav-icons">
            <div class="icon-circle">Virtual Clinic</div>
            <div class="icon-circle">SOS Video Consultation</div>
            <div class="icon-circle">Order Medication</div>
            <div class="icon-circle">Hospital Discount</div>
            <div class="icon-circle">Ambulance Booking</div>
            <div class="icon-circle">About</div>
            <div class="icon-circle">Developers</div>
        </nav>
        <div class="menu" onclick="toggleDropdown()">
            <div class="menu-line"></div>
            <div class="menu-line"></div>
            <div class="menu-line"></div>
        </div>
        <div class="dropdown-menu" id="dropdown-menu">
            <a href="#">Virtual Clinic</a>
            <a href="#">SOS Video Consultation</a>
            <a href="#">Order Medication</a>
            <a href="#">Hospital Discount</a>
            <a href="#">Ambulance Booking</a>
            <a href="#">About</a>
            <a href="#">Developers</a>
        </div>
    </header>
    <div class="note-container">
        <p class="note"><strong>Note:</strong> Please specify your minor ailments clearly. The given prescriptions are applicable for all with an age of 10-60 years.</p>
    </div>
    
    <main class="main-container">
        <div class="output-container" id="output-container">
            <div id="output"></div> <!-- Changed from textarea to div for better styling -->
        </div>

        <div class="doctor-video-container">
            <video id="doctor-video" autoplay loop muted>
                <source src="C:\Users\heena\virtual-clinic\Assets\dr.mp4" type="video/webm">
            </video>
            <p class="doctor-name">Dr. Cure</p>
        </div>
    </main>
    
    <section class="input-section">
        <div class="note">
            <p><strong>Note:</strong> This application is not intended for use by children.</p>
        </div>
        
        <div id="recommendations" class="recommendations">
            <!-- Recommendations will appear here dynamically -->
            <div class="recommendation-box" onclick="selectRecommendation(this)">I am having body pain from 4 days</div>
            <div class="recommendation-box" onclick="selectRecommendation(this)">I have sore throat and running nose</div>
            <div class="recommendation-box" onclick="selectRecommendation(this)">I have been coughing since yesterday</div>
            <div class="recommendation-box" onclick="selectRecommendation(this)">I cut my finger while cooking</div>
        </div>
        
        <div class="input-container">
            <!-- Voice Input Symbol -->
            <button id="voice-input" class="btn" title="Voice Input" onclick="enableVoiceInput()">ðŸŽ¤</button>

            <!-- Input Field -->
            <input type="text" id="symptoms-input" placeholder="Type your symptoms here..." autocomplete="off" oninput="showRecommendations()" onkeypress="checkEnter(event)">

            <!-- Enter Symbol -->
            <button id="enter-button" class="btn" title="Enter" onclick="submitSymptoms()">âž”</button>

            <!-- Voice Output Button -->
            <button id="voice-output" class="btn muted" title="Voice Output" onclick="toggleVoiceOutput()">ðŸ”Š</button>
        </div>
    </section>

    <script src="home.js"></script>
    <script>
        let voiceMuted = false; // Track whether voice output is muted
    
        // Function to submit symptoms to Rasa and get the response
        async function submitSymptoms() {
            const inputField = document.getElementById('symptoms-input');
            const outputArea = document.getElementById('output');
            const outputContainer = document.getElementById('output-container'); // Get output container
            const symptoms = inputField.value;
    
            if (symptoms.trim() === '') {
                alert('Please enter your symptoms.');
                return;
            }
    
            // Clear input field
            inputField.value = '';
    
            // Send request to Rasa server
            try {
                const response = await fetch('http://localhost:5005/webhooks/rest/webhook', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ sender: 'user', message: symptoms }),
                });
    
                const data = await response.json();
                if (data && Array.isArray(data)) {
                    outputArea.innerHTML += `<div class="conversation user current-conversation">User: ${symptoms}</div>`;
                    
                    data.forEach(msg => {
                        if (msg.text) {
                            outputArea.innerHTML += `<div class="conversation doctor">Dr. Cure: ${msg.text}</div>`;
                        }
                    });
                    
                    outputContainer.scrollTop = outputContainer.scrollHeight;
                    highlightCurrentConversation();
    
                    if (!voiceMuted) {
                        speakResponse(data);
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                outputArea.innerHTML += `<div class="conversation error">Error: Could not reach the Rasa server.</div>`;
            }
        }
    
        function highlightCurrentConversation() {
            const conversations = document.querySelectorAll('.conversation');
            conversations.forEach(conv => conv.classList.remove('current-conversation'));
            const latestConversation = conversations[conversations.length - 1];
            if (latestConversation) latestConversation.classList.add('current-conversation');
        }
    
        function enableVoiceInput() {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            const recognition = new SpeechRecognition();
    
            recognition.continuous = false; // End recognition after a single result
            recognition.interimResults = false; // No interim results
            recognition.lang = 'en-US'; // Set language
    
            recognition.start();
    
            recognition.onresult = (event) => {
                const voiceInput = event.results[0][0].transcript;
                document.getElementById('symptoms-input').value = voiceInput;
                submitSymptoms(); // Automatically submit the recognized input
            };
    
            recognition.onerror = (event) => {
                console.error('Voice input error:', event.error);
                alert('Voice input not recognized. Please try again.');
            };
        }
    
        function speakResponse(data) {
            const utterance = new SpeechSynthesisUtterance();
            data.forEach(msg => {
                if (msg.text) {
                    utterance.text = msg.text;
                    speechSynthesis.speak(utterance);
                }
            });
        }
    
        function toggleVoiceOutput() {
            voiceMuted = !voiceMuted;
            const voiceButton = document.getElementById('voice-output');
            if (voiceMuted) {
                voiceButton.classList.add('muted');
                voiceButton.title = 'Voice Output Muted';
                voiceButton.innerHTML = 'ðŸ”‡';
            } else {
                voiceButton.classList.remove('muted');
                voiceButton.title = 'Voice Output Active';
                voiceButton.innerHTML = 'ðŸ”Š';
            }
        }
    
        function checkEnter(event) {
            if (event.key === 'Enter') submitSymptoms();
        }
    
        function selectRecommendation(element) {
            const symptomsInput = document.getElementById('symptoms-input');
            symptomsInput.value = element.textContent;
            submitSymptoms();
        }
    
        function showRecommendations() {
            // Additional logic for showing dynamic recommendations
        }
    </script>
    
</body>
</html>
